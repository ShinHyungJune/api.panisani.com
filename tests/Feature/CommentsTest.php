<?php

namespace Tests\Feature;

use App\Models\Board;
use App\Models\Comment;
use App\Models\Post;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CommentsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;
    protected $other;
    protected $post;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();
        $this->post = Post::factory()->create();

        $this->actingAs($this->user);

        $this->form = [
            "post_id" => $this->post->id,
            "description" => "내용입니다",
        ];
    }

    /** @test */
    public function 검색어가_포함된_닉네임을_가진_댓글목록을_조회할_수_있다()
    {
        $word = "테스트";

        $this->user->update(["nickname" => "123{$word}dd"]);

        $comments = Comment::factory()->count(7)->create([
            "user_id" => $this->user->id,
            "post_id" => $this->post->id
        ]);

        $excludeComments = Comment::factory()->count(7)->create([
            "user_id" => $this->other->id,
            "post_id" => $this->post->id
        ]);

        $items = $this->json("get", "/api/comments", [
            "word" => $word
        ])->decodeResponseJson()["data"];

        $this->assertCount(count($comments), $items);
    }

    /** @test */
    public function 특정_댓글에_대한_댓글목록을_조회할_수_있다()
    {
        $comment = Comment::factory()->create();

        $comments = Comment::factory()->count(7)->create([
            "comment_id" => $comment->id,
        ]);

        $form = [
            "comment_id" => $comment->id,
        ];

        $items = $this->json("get", "/api/comments",$form)->decodeResponseJson()["data"];

        $this->assertCount(count($comments), $items);
    }

    /** @test */
    public function 특정게시글에_포함된_댓글목록을_조회할_수_있다()
    {
        $comments = Comment::factory()->count(7)->create([
            "user_id" => $this->user->id,
            "post_id" => $this->post->id
        ]);

        $excludeComments = Comment::factory()->count(7)->create([
            "post_id" => Post::factory()->create()->id
        ]);

        $form = [
            "post_id" => $this->post->id
        ];

        $items = $this->json("get", "/api/comments", $form)->decodeResponseJson()["data"];

        $this->assertCount(count($comments), $items);
    }

    /** @test */
    public function 특정게시글의_베스트댓글목록을_조회할_있다()
    {
        $bestComments = Comment::factory()->count(2)->create([
            "post_id" => $this->post->id,
            "count_like" => 1000
        ]);

        $commonComments = Comment::factory()->count(8)->create([
            "post_id" => $this->post->id,
            "count_like" => 10
        ]);

        $form = [
            "post_id" => $this->post->id
        ];

        $items = $this->json("get", "/api/commentsByBest", $form)->decodeResponseJson()["data"];

        $this->assertCount(count($bestComments), $items);
    }

    /** @test */
    public function 사용자는_댓글을_생성할_수_있다()
    {
        $this->post("/api/comments", $this->form);

        $this->assertCount(1, Comment::get());
    }

    /** @test */
    public function 사용자는_대댓글을_생성할_수_있다()
    {
        $comment = Comment::factory()->create();

        $this->form["comment_id"] = $comment->id;

        $this->post("/api/comments", $this->form);

        $this->assertCount(2, Comment::get());

        $this->assertCount(1,$comment->load("comments")->comments);
    }

    /** @test */
    public function 사용자는_자신의_댓글을_삭제할_수_있다()
    {
        $comment = Comment::factory()->create([
            "user_id" => $this->user->id
        ]);

        $this->actingAs($this->other);

        $this->delete("/api/comments/".$comment->id);

        $this->assertCount(1, Comment::get());


        $this->actingAs($this->user);

        $this->delete("/api/comments/".$comment->id);

        $this->assertCount(0, Comment::get());
    }

    /** @test */
    public function 댓글이_생성되면_게시글의_댓글수가_상승한다()
    {
        $comment = Comment::factory()->create([
            "post_id" => $this->post->id,
            "user_id" => $this->user->id
        ]);

        $this->assertEquals(1, $comment->load("post")->post->count_comment);
    }

    /** @test */
    public function 댓글이_삭제되면_게시글의_댓글관련집계수도_업데이트된다()
    {
        $comment = Comment::factory()->create([
            "post_id" => $this->post->id,
            "user_id" => $this->user->id
        ]);

        $this->assertEquals(1, $comment->load("post")->post->count_comment);

        $comment->delete();

        $this->assertEquals(0, $comment->load("post")->post->count_comment);
    }

    /** @test */
    public function 댓글이_업데이트되면_게시글의_댓글관련집계수도_업데이트된다()
    {
        $post = Post::factory()->create([
            "count_like" => 10,
            "count_hate" => 20,
        ]);

        $comment = Comment::factory()->create([
            "post_id" => $post->id,
            "user_id" => $this->user->id,
            "count_like" => 0,
            "count_hate" => 0
        ]);


        $comment->update([
            "count_like" => 20,
            "count_hate" => 10
        ]);

        $this->assertEquals(30, $comment->load("post")->post->count_like);
        $this->assertEquals(30, $comment->load("post")->post->count_hate);

        $comment->delete();

        $this->assertEquals(10, $comment->load("post")->post->count_like);
        $this->assertEquals(20, $comment->load("post")->post->count_hate);
    }
}
