<?php

namespace Tests\Feature;

use App\Models\Board;
use App\Models\Community;
use App\Models\Post;
use App\Models\User;
use App\Models\Visit;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class BoardsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;
    protected $other;
    protected $community;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();
        $this->other = User::factory()->create();

        $this->actingAs($this->user);

        $this->community = Community::factory()->create([
            "user_id" => $this->user->id
        ]);

        $this->form = [
            "community_id" => $this->community->id,
            "title" => "테스트",
        ];
    }

    /** @test */
    public function 누구나_순서순으로_게시판목록을_조회할_수_있다()
    {
        for($i = 0; $i < 10; $i++){
            Board::factory()->create([
                "order" => rand(0,100),
                "community_id" => $this->community->id
            ]);
        }

        $items = $this->json("get", "/api/boards", [
            "community_id" => $this->community->id
        ])->decodeResponseJson()["data"];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem){
                $this->assertTrue($prevItem["order"] <= $item["order"]);
            }

            $prevItem = $item;
        }
    }

    /** @test */
    public function 누구나_조회수순으로_게시판목록을_조회할_수_있다()
    {
        for($i = 0; $i < 10; $i++){
            Board::factory()->create([
                "count_view" => rand(1,10000)
            ]);
        }

        $items = $this->json("get", "/api/boards", [
            "order_by" => "count_view",
        ])->decodeResponseJson()["data"];

        $prevItem = null;

        foreach($items as $item){
            if($prevItem){
                $this->assertTrue($prevItem["count_view"] >= $item["count_view"]);
            }

            $prevItem = $item;
        }
    }

    /** @test */
    public function 누구나_특정커뮤니티에_포함된_게시판목록을_조회할_수_있다()
    {
        $otherCommunity = Community::factory()->create();

        $communityBoards = Board::factory()->count(7)->create([
            "community_id" => $this->community->id,
        ]);

        $otherCommunityBoards = Board::factory()->count(11)->create([
            "community_id" => $otherCommunity->id,
        ]);

        $items = $this->json("get", "/api/boards", [
            "community_id" => $this->community->id,
        ])->decodeResponseJson()["data"];

        $this->assertCount(count($communityBoards), $items);
    }

    /** @test */
    public function 커뮤니티주인은_해당_커뮤니티에_게시판을_생성할_수_있다()
    {
        $myCommunity = Community::factory()->create(["user_id" => $this->user->id]);

        $other = User::factory()->create();

        $otherCommunity = Community::factory()->create(["user_id" => $other->id]);


        $this->form["community_id"] = $otherCommunity->id;

        $this->post("/api/boards", $this->form);

        $this->assertCount(0, Board::get());


        $this->form["community_id"] = $myCommunity->id;

        $this->post("/api/boards", $this->form);

        $this->assertCount(1, Board::get());
    }

    /** @test */
    public function 공개된_커뮤니티는_공개커뮤니티_최대개수를_넘을_수_없다()
    {
        $boards = Board::factory()->count(Community::$maxOpenBoardCount)->create([
            "community_id" => $this->community->id,
            "open" => 1
        ]);

        $this->post("/api/boards", $this->form);

        $this->assertCount(Community::$maxOpenBoardCount, Board::get());
    }

    /** @test */
    public function 커뮤니티주인은_게시판을_삭제할_수_있다()
    {
        $board = Board::factory()->create(["user_id" => $this->user->id]);

        $this->actingAs($this->other);

        $this->delete("/api/boards/".$board->id);

        $this->assertCount(1, Board::get());


        $this->actingAs($this->user);

        $this->delete("/api/boards/".$board->id);

        $this->assertCount(0, Board::get());
    }

    /** @test */
    public function 커뮤니티주인은_게시판_공개여부를_설정할_수_있다()
    {
        $board = Board::factory()->create([
            "user_id" => $this->user->id,
            "open" => 0,
        ]);

        $this->patch("/api/boards/".$board->id, [
            "open" => 1
        ]);

        $board = Board::find($board->id);

        $this->assertEquals(1, $board->open);
    }

    /** @test */
    public function 커뮤니티주인은_게시판_공개여부를_설정할_때_최대공개수를_초과할_수_없다()
    {
        $openBoards = Board::factory()->count(Community::$maxOpenBoardCount)->create([
            "community_id" => $this->community->id,
            "open" => 1,
        ]);

        $closeBoard = Board::factory()->create([
            "community_id" => $this->community->id,
            "open" => 0,
        ]);

        $this->patch("/api/boards/".$closeBoard->id, [
            "open" => 1
        ]);

        $closeBoard = Board::find($closeBoard->id);

        $this->assertEquals(0, $closeBoard->open);
    }

    /** @test */
    public function 조회수집계를_실행하면_소속게시글들의_합친_조회수가_기록된다()
    {
        $item = Board::factory()->create();

        // 집계
        $visits = Visit::factory()->count(100)->create([
            "board_id" => $item->id,
            "created_at" => Carbon::yesterday()
        ]);

        $this->artisan('calculate:boardCountView');

        $item = Board::find($item->id);

        $this->assertEquals(count($visits), $item->count_view_yesterday);
        $this->assertEquals(count($visits), $item->count_view);

        // 1일 추가해서 재집계
        $secondVisits = Visit::factory()->count(50)->create([
            "board_id" => $item->id,
            "created_at" => Carbon::today()
        ]);

        $this->travelTo(Carbon::now()->addDay());

        $this->artisan('calculate:boardCountView');

        $item = Board::find($item->id);

        $this->assertEquals(count($secondVisits), $item->count_view_yesterday);
        $this->assertEquals(count($visits) + count($secondVisits), $item->count_view);
    }
}
