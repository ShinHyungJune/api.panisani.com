<?php

namespace App\Models;

use App\Enums\KakaoTemplate;
use App\Enums\OrderState;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;
use Illuminate\Http\Request;

class Order extends Model
{
    use HasFactory;

    protected $fillable = [
        "imp_uid",
        "merchant_uid",

        "user_id",
        "user_name",

        "pay_method_id",
        "pay_method_name",
        "pay_method_pg",
        "pay_method_method",
        "pay_method_commission",

        "price",

        "product_price",
        "product_point",

        "refund_owner",
        "refund_bank",
        "refund_account",

        "state",

        "reason",

        "vbank_num",
        "vbank_date",
        "vbank_name",
    ];

    protected $casts = [

    ];


    public $take = 50;

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updated(function ($order) {
            /*
            $prevState = $order->getOriginal("state");

            $user = $order->user;

            if ($prevState == OrderState::FAIL) {
                if ($order->state == OrderState::SUCCESS) {

                    // 결제상품 주문성공처리
                    $order->orderProducts()->update([
                        "state" => OrderProductState::SUCCESS
                    ]);

                    $products = $order->products()->where("products.product_id", null)->cursor();

                    foreach($products as $product){
                        if($product->type == ProductType::DATING)
                            $user->update([
                                "count_dating" => $user->count_dating + $product->count_dating
                            ]);
                    }
                }
            }*/
        });
    }

    public static function getTake()
    {
        return (new static)->take;
    }

    /*
    public function getCanRefundAttribute()
    {
        return $this->refunds()->count() == 0;
    }
    */

    public function getCanReviewAttribute()
    {
        return;
    }

    public function payMethod()
    {
        return $this->belongsTo(PayMethod::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    /*
    public function refunds()
    {
        return $this->hasMany(Refund::class);
    }
    */

    // 결제시도
    public function attempt(Request $request)
    {
        $payMethod = PayMethod::find($request->pay_method_id);

        if (!$payMethod)
            return ["success" => 0, "message" => "존재하지 않는 결제수단입니다."];

        $order = Order::create([
            "merchant_uid" => rand() . Carbon::now()->timestamp,
            "user_id" => auth()->user()->id,
            "user_name" => auth()->user()->name,
            "user_contact" => auth()->user()->contact,
            "user_email" => auth()->user()->email,

            "product_title" => $request->point." 마일리지 충전",
            "product_point" => $request->point,
            "product_price" => $request->point,

            "pay_method_id" => $payMethod->id,
            "pay_method_name" => $payMethod->name,
            "pay_method_pg" => $payMethod->pg,
            "pay_method_method" => $payMethod->method,
            "pay_method_commission" => $payMethod->commission,

            "price" => $request->point,

            "state" => OrderState::FAIL,
        ]);

        return ["success" => 1, "message" => "성공적으로 처리되었습니다.", "data" => $order];
    }



}
